import jetpack from "fs-jetpack";
import path from "path";
import ts from "typescript";
import {ResolvedConfig} from "vite";
import {endTimer, startTimer} from "./Utils/Timed";
import {relativeify} from "./Utils/ViteFunction";
import {formatImport} from "./Utils/Paths";

export type UserPluginConfig = {
	projectRoot?: string;
	storesPath: string;
	storesFileName?: string;
}

class PluginConfigInstance {

	/**
	 * The project root dir
	 * @type {string}
	 */
	public projectRoot?: string;
	/**
	 * Filesystem instance for the project root
	 * @type {typeof jetpack}
	 */
	public projectRootDirectory: typeof jetpack;

	/**
	 * The path to where our stores are located
	 * @type {string}
	 */
	public storesPath: string;
	/**
	 * Filesystem instance for the stores path
	 * @type {typeof jetpack}
	 */
	public storesDirectory: typeof jetpack;

	/**
	 * The name of the vue declaration file that will be generated
	 * For ex: stores.d.ts
	 * @type {string}
	 */
	public storesFileName?: string = "stores.d.ts";
	/**
	 * The name of the store loader file that will be generated
	 * This contains an array of all the stores and their meta.
	 * @type {string}
	 */
	public storeLoaderFile: string = "StoreLoader.ts";

	/**
	 * The directory name inside the stores path where
	 * all generated files will be written
	 * @type {string}
	 */
	public generatedDirName: string = "Generated";
	/**
	 * Filesystem instance for the generated files path
	 * @type {typeof jetpack}
	 */
	public generatedDir: typeof jetpack;

	/**
	 * The resolved vite configuration
	 *
	 * @type {ResolvedConfig}
	 * @private
	 */
	public viteConfig: ResolvedConfig;

	private _tsConfigPath;
	private _parsedCommandLine: ts.ParsedCommandLine;

	/**
	 * The file paths to all of our store files
	 *
	 * @type {string[]}
	 */
	public storeFilePaths: string[];

	public setUserConfig(config: UserPluginConfig) {
		if (config.projectRoot) {
			this.projectRoot = config.projectRoot;
		}
		if (config.storesPath) {
			this.storesPath = config.storesPath;
		}
		if (config.storesFileName) {
			this.storesFileName = config.storesFileName;
		}
	}

	public init(config: ResolvedConfig) {
		if (!this.projectRoot) {
			this.projectRoot = config.root;
		}

		this.storesPath           = path.resolve(this.projectRoot, this.storesPath);
		this.storesDirectory      = jetpack.cwd(this.storesPath);
		this.generatedDir         = this.storesDirectory.cwd(this.generatedDirName);
		this.projectRootDirectory = jetpack.cwd(this.projectRoot);
		this.viteConfig           = config;

		this.setStoreFilePaths();

	}

	get tsConfigPath() {
		if (this._tsConfigPath) {
			return this._tsConfigPath;
		}

		const configPath = ts.findConfigFile(this.projectRoot, ts.sys.fileExists, "tsconfig.json");
		if (!configPath) {
			throw new Error("Could not find a valid 'tsconfig.json'.");
		}

		return this._tsConfigPath = configPath;
	}

	get tsConfig() {
		if (this._parsedCommandLine) {
			return this._parsedCommandLine;
		}

		return this._parsedCommandLine = ts.parseJsonConfigFileContent(ts.readConfigFile(this.tsConfigPath, ts.sys.readFile).config, ts.sys, "./");
	}

	get vueDtsPath() {
		return this.generatedDir.path(this.storesFileName);
	}

	get storeLoaderPath() {
		return this.generatedDir.path(this.storeLoaderFile);
	}

	public setStoreFilePaths(): void {
		startTimer("setStoreFilePaths");

		this.storeFilePaths = this.storesDirectory.find({
			directories : false,
			files       : true,
			recursive   : true,
			matching    : ["*Store.ts", "*store.ts"],
		}).map(
			filePath => ts.sys.resolvePath(this.storesDirectory.path(filePath))
		);

		endTimer("setStoreFilePaths");
	}

	/**
	 * Checks if the specified file is one that's generated by the plugin.
	 * This is used within things like the HMR handler to prevent infinite loops.
	 * @param {string} file
	 */
	public isGeneratedFile(file: string): boolean {
		const paths = [
			this.vueDtsPath,
			this.storeLoaderPath,
		];

		return paths.includes(file);
	}

	public getRelativeLoaderImportPath(from: string) {
		const norm = path.relative(path.dirname(from), PluginConfig.storesDirectory.path(
			PluginConfig.generatedDirName,
			PluginConfig.storeLoaderFile
		));

		return formatImport(norm);
	}

	public isStoreFilePath(fileName: string): boolean {
		fileName = ts.sys.resolvePath(fileName);

		return this.storeFilePaths.includes(fileName);
	}
}

export const PluginConfig = new PluginConfigInstance();
